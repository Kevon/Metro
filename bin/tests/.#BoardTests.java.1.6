package tests;

import static org.junit.Assert.*;

import java.util.NoSuchElementException;

import org.junit.Test;

import code.Board;
import code.Tile;
import code.TileA;
import code.TileB;
import code.TileC;
import code.TileD;
import code.TileEmpty;

public class BoardTests {
	public  BoardTests (){
		
	}
@Test 
public void placeTest(){
	Board testBoard = new Board();

	int x = 1;
	int y = 1;
	
	TileA testTile = new TileA(testBoard);
	testBoard.placeTile(x,y,testTile);
		assertTrue("board placement failed at "+x+", " + y, testBoard.tileAt(x,y).equals(testTile));

}
	@Test 
	public void doublePlacementTest(){
		Board testBoard = new Board();
	
		int x = 1;
		int y = 1;
		
		TileA testTile1 = new TileA(testBoard);
		TileA testTile2 = new TileA(testBoard);
	
		testBoard.placeTile(x,y,testTile1);
		boolean actual = testBoard.placeTile(x,y,testTile2);
	
		assertFalse("The board succesfully places 2 tiles on the same location, while it shouldn't have", actual);
	
	}

	@Test
	public void tileAtTest(){
		
		Board testBoard = new Board();
		
		int x = 1;
		int y = 1;
		
		TileA expected = new TileA(testBoard);
		
		testBoard.placeTile(x,y,expected);
		Tile actual = testBoard.tileAt(x,y);
		
		assertTrue("The tile at position "+x+", "+y+" was not returned properly", expected.equals(actual));
	}

	@Test
	public void removeTest(){
		Board testBoard = new Board();
		
		int x = 1;
		int y = 1;
		
		TileA testTile = new TileA(testBoard);
		testBoard.placeTile(x, y, testTile);
		Tile actual;
		actual = testBoard.remove();
		Tile expected = testTile;
		
		assertTrue("The tile was not successfully removed.", expected == actual);
	}
	
	@Test
	public void removeNothingTest(){
		Board testBoard = new Board();
		boolean worked = false;
		try{testBoard.remove();}
		catch(NoSuchElementException e){
			worked = true;
		}
		
		
		assertTrue("You shouldn't be able to remove a tile here since no tile is located here.", worked);
	}
	@Test
	public void connectionTest(){
		Board testBoard = new Board();
		
		TileA testTile1 = new TileA(testBoard);
		TileC testTile2 = new TileC(testBoard);
		
		int x1 = 1;
		int y1 = 1;
		int x2 = 2;
		int y2 = 1;
		
		testBoard.placeTile(x1, y1, testTile1);
		testBoard.placeTile(x2, y2, testTile2);
		
		int actual = testBoard.checkConnection(x1,y1,6,0);
		int expected = 2;
		
		assertTrue("The board should have acknowlegded that it was connected and counted "+expected+" points, but it actually counted "+actual+" points.", expected == actual);
	}
	@Test
	public void tileBCornerTest(){
		Board testBoard = new Board();
		
		TileB testTile1 = new TileB(testBoard);
		
		int x = 1;
		int y = 1;
		testBoard.placeTile(x, y, testTile1);
		boolean actual = testBoard.checkLegalTile();
	
		assertFalse("The tile TileB should not have been able to be placed in the corner, but it was placed. We should probably fix that.", actual);
	}
	
//	@Test
//	public void TileBCornerTestNoOtherOption(){
//		Board testBoard = new Board();
//		
//		
//		TileB testTile1 = new TileB(testBoard);
//		TileA testTile2 = new TileA(testBoard);
//		
//		int x = 1;
//		int y = 1;
//		 
//		testBoard.placeTile(2, 1, testTile2);
//		testBoard.placeTile(3, 1, testTile2);
//		testBoard.placeTile(1, 2, testTile2);
//		testBoard.placeTile(2, 2, testTile2);
//		testBoard.placeTile(3, 2, testTile2);
//		testBoard.placeTile(4, 2, testTile2);
//		testBoard.placeTile(1, 3, testTile2);
//		testBoard.placeTile(2, 3, testTile2);
//		testBoard.placeTile(3, 3, testTile2);
//		testBoard.placeTile(4, 3, testTile2);
//		testBoard.placeTile(2, 4, testTile2);
//		testBoard.placeTile(3, 4, testTile2);
//		testBoard.placeTile(x, y, testTile1);
//		boolean actual = testBoard.checkLegalTile();
//	
//		assertTrue("The tile TileB should have been able to be placed in the corner, but it was not placed. We should probably fix that.", actual);
//	}
	@Test
	public void tileCCornerTest(){
		Board testBoard = new Board();
		
		TileC testTile1 = new TileC(testBoard);
		
		int x = 1;
		int y = 1;
		testBoard.placeTile(x, y, testTile1);
		boolean actual = testBoard.checkLegalTile();
	
		assertFalse("The tile TileC should not have been able to be placed in the corner, but it was placed. We should probably fix that.", actual);
	}
	
//	@Test
//	public void TileCCornerTestNoOtherOption(){
//		Board testBoard = new Board();
//		
//		
//		TileC testTile1 = new TileC(testBoard);
//		TileA testTile2 = new TileA(testBoard);
//		
//		int x = 1;
//		int y = 1;
//		 
//		testBoard.placeTile(2, 1, testTile2);
//		testBoard.placeTile(3, 1, testTile2);
//		testBoard.placeTile(1, 2, testTile2);
//		testBoard.placeTile(2, 2, testTile2);
//		testBoard.placeTile(3, 2, testTile2);
//		testBoard.placeTile(4, 2, testTile2);
//		testBoard.placeTile(1, 3, testTile2);
//		testBoard.placeTile(2, 3, testTile2);
//		testBoard.placeTile(3, 3, testTile2);
//		testBoard.placeTile(4, 3, testTile2);
//		testBoard.placeTile(2, 4, testTile2);
//		testBoard.placeTile(3, 4, testTile2);
//		testBoard.placeTile(x, y, testTile1);
//		boolean actual = testBoard.checkLegalTile();
//	
//		assertTrue("The tile TileC should have been able to be placed in the corner, but it was not placed. We should probably fix that.", actual);
//	}
	@Test
	public void tileDCornerTest(){
		Board testBoard = new Board();
		
		TileD testTile1 = new TileD(testBoard);
		
		int x = 1;
		int y = 1;
		testBoard.placeTile(x, y, testTile1);
		boolean actual = testBoard.checkLegalTile();
	
		assertFalse("The tile TileD should not have been able to be placed in the corner, but it was placed. We should probably fix that.", actual);
	}
	@Test
	public void tileDEdgePlaceTest(){
		Board testBoard = new Board();
		
		TileD testTile1 = new TileD(testBoard);
		
		int x = 4;
		int y = 3;
		testBoard.placeTile(x, y, testTile1);
		boolean actual = testBoard.checkLegalTile();
	
		assertFalse("The tile TileD should not have been able to be placed on an edge space, but it was placed. We should probably fix that.", actual);
	}
//	@Test
//	public void TileDCornerTestNoOtherOption(){
//		Board testBoard = new Board();
//		
//		
//		TileD testTile1 = new TileD(testBoard);
//		TileA testTile2 = new TileA(testBoard);
//		
//		int x = 1;
//		int y = 1;
//		 
//		testBoard.placeTile(2, 1, testTile2);
//		testBoard.placeTile(3, 1, testTile2);
//		testBoard.placeTile(1, 2, testTile2);
//		testBoard.placeTile(2, 2, testTile2);
//		testBoard.placeTile(3, 2, testTile2);
//		testBoard.placeTile(4, 2, testTile2);
//		testBoard.placeTile(1, 3, testTile2);
//		testBoard.placeTile(2, 3, testTile2);
//		testBoard.placeTile(3, 3, testTile2);
//		testBoard.placeTile(4, 3, testTile2);
//		testBoard.placeTile(2, 4, testTile2);
//		testBoard.placeTile(3, 4, testTile2);
//		testBoard.placeTile(x, y, testTile1);
//		boolean actual = testBoard.checkLegalTile();
//	
//		assertTrue("The tile TileD should have been able to be placed in the corner, but it was not placed. We should probably fix that.", actual);
//	}
//	@Test
//	public void TileDEdgeTestNoOtherOptions(){
//		Board testBoard = new Board();
//		
//		
//		TileD testTile1 = new TileD(testBoard);
//		TileA testTile2 = new TileA(testBoard);
//		
//		int x = 1;
//		int y = 3;
//
//		testBoard.placeTile(2, 2, testTile2);
//		testBoard.placeTile(3, 2, testTile2);
//		testBoard.placeTile(2, 3, testTile2);
//		testBoard.placeTile(3, 3, testTile2);
//		testBoard.placeTile(x, y, testTile1);
//		boolean actual = testBoard.checkLegalTile();
//	
//		assertTrue("The tile TileD should have been able to be placed on an edge space, but it was not placed. We should probably fix that.", actual);
//	}
	
	@Test
	public void bigBoardCreationTest(){
		Board testBoard = new Board();
		TileEmpty tile = new TileEmpty(testBoard);
		
		boolean actual = true;
		
		for(int x = 1; x <= 12; x++){
			for(int y = 1; y <= 12; y++){
				if(!testBoard.tileAt(x,y).equals(tile)){
					actual =  false;
				}
			}
		}
		
		assertTrue("The board should have made a board that's 12 x 12 placing empty tiles in every position, but it didn't.", actual);
	}
}
